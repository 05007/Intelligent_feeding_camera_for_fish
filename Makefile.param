# Makefile.param
#
# Only global variable should be defined here.
# All the variables must be used as "export" and "?=".
# Otherwise, there will be some errors, when Makefile.param is nested.

# Use this file as the following sample
# ifeq ($(PARAM_FILE), )
#     PARAM_FILE:=../Makefile.param
#     include $(PARAM_FILE)
# endif

#
# .config is generated by menuconfig, all the configs can be defined in menuconfig.
#

###############################################################################
## option
APP_32BIT ?= y

###############################################################################
## debug quiet
ifeq ("$(origin V)", "command line")
  BUILD_VERBOSE = $(V)
endif
ifndef BUILD_VERBOSE
  BUILD_VERBOSE = 0
endif

ifeq ($(BUILD_VERBOSE),1)
  Q :=
  ECHO := @:
else
  Q := @
  ECHO := @echo
endif
export Q
export ECHO

export PARAM_FILE
###############################################################################
## Get the MPP_DIR
this-makefile := $(lastword $(MAKEFILE_LIST))
abs_srctree := $(realpath $(dir $(this-makefile)))
PARAM_DIR := $(abs_srctree)

###############################################################################
# parse cfg.mak
include $(PARAM_DIR)/cfg.mak

# export global variables
#  SCA200V100
export SC_ARCH ?= $(CONFIGSC_SOC:"%"=%)
# smp or amp
export ARM_ARCH ?= $(CONFIGSC_ARM_ARCH_TYPE:"%"=%)

# linux
export OSTYPE ?= $(CONFIGSC_OS_TYPE:"%"=%)
# CROSS
ifeq ($(APP_32BIT),y)
export CROSS_COMPILE ?= $(CONFIGSC_SC_CROSS_32:"%"=%)
else
export CROSS_COMPILE ?= $(CONFIGSC_SC_CROSS:"%"=%)
endif

ifeq ($(SC_ARCH), )
  $(error SC_ARCH not defined! Please check!)
endif

###############################################################################
# Define cross compiler

export CXX:=$(CROSS_COMPILE)g++
export CC:=$(CROSS_COMPILE)gcc
export AR:=$(CROSS_COMPILE)ar
export STRIP:=$(CROSS_COMPILE)strip

###############################################################################
# Define the object directory

export MPP_PATH   := $(PARAM_DIR)
export REL_DIR    := $(PARAM_DIR)
export SAMPLE_DIR := $(REL_DIR)/sample
export REL_INC    := $(REL_DIR)/include
ifeq ($(APP_32BIT),y)
export REL_LIB := $(REL_DIR)/lib32
else
export REL_LIB := $(REL_DIR)/lib64
endif

###############################################################################
# CFLAGS, LDFLAGS

# Libs CFLAGS, build flags for linux or liteos libs
export LIBS_CFLAGS := -Wall

# Libs LDFLAGS, link flags for linux or liteos libs
export LIBS_LD_CFLAGS
#------------------------------------------------------------------------------

# LIB GLOBAL CFLAGS
#LIBS_CFLAGS    += -mcpu=cortex-a53 -mfloat-abi=softfp -mfpu=neon-vfpv4
#LIBS_LD_CFLAGS += -mcpu=cortex-a53 -mfloat-abi=softfp -mfpu=neon-vfpv4

# common CFLAGS
LIBS_CFLAGS    += -include $(REL_INC)/autoconf.h
LIBS_CFLAGS    += -fno-aggressive-loop-optimizations -ffunction-sections -fdata-sections -O2
LIBS_LD_CFLAGS += -fno-aggressive-loop-optimizations

# secure CFLAGS
LIBS_CFLAGS    += -fstack-protector-strong -fPIC
LIBS_LD_CFLAGS += -Wl,-z,relro -Wl,-z,noexecstack -Wl,-z,now,-s

# -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE is for mmap64
ifeq ($(CONFIGSC_KERNEL_BIT_64),y)
  LIBS_CFLAGS += -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE
  LIBS_LD_CFLAGS += -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE
endif

LDFLAGS_32 :=
LDFLAGS_64 += -Wl,-rpath,/lib64:/usr/lib64

ifeq ($(APP_32BIT), y)
LIBS_LD_CFLAGS += $(LDFLAGS_32)
else
LIBS_LD_CFLAGS += $(LDFLAGS_64)
endif

LIBS_LD_CFLAGS += -ldl
## -lrt : for libosal.so timer_create()
LIBS_LD_CFLAGS += -lrt

#------------------------------------------------------------------------------
# Define the param of audio
#export AUDIO_LIBA ?= $(REL_LIB)/libaac_codec.a
#export AUDIO_LIBS ?= $(REL_LIB)/libaac_codec.so

